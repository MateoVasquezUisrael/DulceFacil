// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace DulceFacil.Infraestructura.AccesoDatos;

public partial class DulceFacilContext : DbContext
{
    public DulceFacilContext()
    {
    }

    public DulceFacilContext(DbContextOptions<DulceFacilContext> options)
        : base(options)
    {
    }

    public virtual DbSet<TCentrosDistribucion> TCentrosDistribucion { get; set; }

    public virtual DbSet<TClientes> TClientes { get; set; }

    public virtual DbSet<TClientesDirecciones> TClientesDirecciones { get; set; }

    public virtual DbSet<TClientesTipo> TClientesTipo { get; set; }

    public virtual DbSet<TCompras> TCompras { get; set; }

    public virtual DbSet<TPedidos> TPedidos { get; set; }

    public virtual DbSet<TProductos> TProductos { get; set; }

    public virtual DbSet<TProductosCentrosDistribucion> TProductosCentrosDistribucion { get; set; }

    public virtual DbSet<TProductosPuntoVenta> TProductosPuntoVenta { get; set; }

    public virtual DbSet<TPuntosVenta> TPuntosVenta { get; set; }

    public virtual DbSet<TRutas> TRutas { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=DESKTOP-NCNTGBP\\MIPRIMERSQL2024;Initial Catalog=DulceFacil;Integrated Security=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<TCentrosDistribucion>(entity =>
        {
            entity.HasKey(e => e.CentroDistribucionId).HasName("PK_CentroDistribucionId_in_TCentrosDistribucion");

            entity.Property(e => e.CentroDistribucionId).ValueGeneratedNever();
            entity.Property(e => e.CentroDistribucionCiudad)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CentroDistribucionDireccion)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TClientes>(entity =>
        {
            entity.HasKey(e => e.ClienteId).HasName("PK_ClienteId_in_TClientes");

            entity.HasIndex(e => e.ClienteCedula, "UN_ClienteCedula_in_TClientes").IsUnique();

            entity.Property(e => e.ClienteId).ValueGeneratedNever();
            entity.Property(e => e.ClienteApellido)
                .IsRequired()
                .HasMaxLength(45)
                .IsUnicode(false);
            entity.Property(e => e.ClienteCedula)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ClienteEmail)
                .HasMaxLength(70)
                .IsUnicode(false);
            entity.Property(e => e.ClienteNombre)
                .IsRequired()
                .HasMaxLength(45)
                .IsUnicode(false);
            entity.Property(e => e.ClienteTelf)
                .HasMaxLength(25)
                .IsUnicode(false);

            entity.HasOne(d => d.ClienteTipo).WithMany(p => p.TClientes)
                .HasForeignKey(d => d.ClienteTipoId)
                .HasConstraintName("FK_ClienteTipoId_in_TClientes");
        });

        modelBuilder.Entity<TClientesDirecciones>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.ClienteDireccion)
                .IsRequired()
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.ClienteDireccionDetalles)
                .HasMaxLength(200)
                .IsUnicode(false);

            entity.HasOne(d => d.Cliente).WithMany()
                .HasForeignKey(d => d.ClienteId)
                .HasConstraintName("FK_ClienteId_in_TClientesDirecciones");
        });

        modelBuilder.Entity<TClientesTipo>(entity =>
        {
            entity.HasKey(e => e.ClienteTipoId).HasName("PK_ClienteTipoId_in_TClientesTipo");

            entity.Property(e => e.ClienteTipoId).ValueGeneratedNever();
            entity.Property(e => e.ClienteTipoDescrip)
                .HasMaxLength(45)
                .IsUnicode(false);
            entity.Property(e => e.ClienteTipoNombre)
                .IsRequired()
                .HasMaxLength(45)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TCompras>(entity =>
        {
            entity.HasKey(e => e.CompraId).HasName("PK_CompraId_in_TCompras");

            entity.HasIndex(e => e.CompraCodigoUnico, "UQ__TCompras__AAFCC99B1172EE02").IsUnique();

            entity.Property(e => e.CompraId).ValueGeneratedNever();
            entity.Property(e => e.CompraCodigoUnico)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ProductoCompradoPrecio).HasColumnType("decimal(6, 3)");

            entity.HasOne(d => d.PuntoVenta).WithMany(p => p.TCompras)
                .HasForeignKey(d => d.PuntoVentaId)
                .HasConstraintName("FK_PuntoVentaId_in_TCompras");
        });

        modelBuilder.Entity<TPedidos>(entity =>
        {
            entity.HasKey(e => e.PedidoId).HasName("PK_PedidoId_in_TPedidos");

            entity.Property(e => e.PedidoId).ValueGeneratedNever();

            entity.HasOne(d => d.CentroDistribucion).WithMany(p => p.TPedidos)
                .HasForeignKey(d => d.CentroDistribucionId)
                .HasConstraintName("FK_CentroDistribucionId_in_TPedidos");

            entity.HasOne(d => d.Producto).WithMany(p => p.TPedidos)
                .HasForeignKey(d => d.ProductoId)
                .HasConstraintName("FK_ProductoId_in_TPedidos");

            entity.HasOne(d => d.PuntoVenta).WithMany(p => p.TPedidos)
                .HasForeignKey(d => d.PuntoVentaId)
                .HasConstraintName("FK_PuntoVentaId_in_TPedidos");

            entity.HasOne(d => d.Ruta).WithMany(p => p.TPedidos)
                .HasForeignKey(d => d.RutaId)
                .HasConstraintName("FK_RutaId_in_TPedidos");
        });

        modelBuilder.Entity<TProductos>(entity =>
        {
            entity.HasKey(e => e.ProductoId).HasName("PK_ProductoId_in_TProductos");

            entity.Property(e => e.ProductoId).ValueGeneratedNever();
            entity.Property(e => e.ProductoDescrip)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ProductoNombre)
                .IsRequired()
                .HasMaxLength(45)
                .IsUnicode(false);
            entity.Property(e => e.ProductoPrecioMayorista).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.ProductoPrecioMinorista).HasColumnType("decimal(6, 3)");
        });

        modelBuilder.Entity<TProductosCentrosDistribucion>(entity =>
        {
            entity.HasNoKey();

            entity.HasOne(d => d.CentroDistribucion).WithMany()
                .HasForeignKey(d => d.CentroDistribucionId)
                .HasConstraintName("FK_CentroDistribucionId_in_TProductosCentrosDistribucion");

            entity.HasOne(d => d.Producto).WithMany()
                .HasForeignKey(d => d.ProductoId)
                .HasConstraintName("FK_ProductoId_in_TProductosCentrosDistribucion");
        });

        modelBuilder.Entity<TProductosPuntoVenta>(entity =>
        {
            entity.HasNoKey();

            entity.HasOne(d => d.Pedido).WithMany()
                .HasForeignKey(d => d.PedidoId)
                .HasConstraintName("FK_PedidoId_in_TProductosPuntoVenta");

            entity.HasOne(d => d.Producto).WithMany()
                .HasForeignKey(d => d.ProductoId)
                .HasConstraintName("FK_ProductoId_in_TProductosPuntoVenta");

            entity.HasOne(d => d.PuntoVenta).WithMany()
                .HasForeignKey(d => d.PuntoVentaId)
                .HasConstraintName("FK_PuntoVentaId_in_TProductosPuntoVenta");
        });

        modelBuilder.Entity<TPuntosVenta>(entity =>
        {
            entity.HasKey(e => e.PuntoVentaId).HasName("PK_PuntoVentaId_in_TPuntosVenta");

            entity.Property(e => e.PuntoVentaId).ValueGeneratedNever();
            entity.Property(e => e.PuntoVentaCiudad)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PuntoVentaDireccion)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TRutas>(entity =>
        {
            entity.HasKey(e => e.RutaId).HasName("PK_RutaId_in_TRutas");

            entity.Property(e => e.RutaId).ValueGeneratedNever();
            entity.Property(e => e.RutaDetalles)
                .HasMaxLength(450)
                .IsUnicode(false);
            entity.Property(e => e.RutaDuracionUnidadMedida)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("MINUTOS");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}